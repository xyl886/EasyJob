#!usr/bin/env python
# -*- coding:utf-8 -*-
"""
@author:18034
@file: __init__.py.py
@time: 2025/04/21
"""
# Core/__init__.py

import importlib
import os
import random
import sys
import threading
import time
import traceback

from typing import List

from jinja2 import Template

from .Collection import Job
from .Email import SMTPConfig, EmailMessageContent, EmailSender
from .JobBase import JobBase, JobThread
from .MongoDB import MongoDB
from pathlib import Path


def get_file_path(current_file, marker=""):
    """
    向上递归查找项目根目录（直到找到标记文件，如 .git/pyproject.toml）
    """
    current_path = Path(current_file).resolve().parent
    while current_path != current_path.parent:  # 防止无限循环
        if (current_path / marker).exists():
            return str(current_path) + "\\" + marker
        current_path = current_path.parent
    raise FileNotFoundError(f"Could not find project root with marker: {marker}")


yaml_path = ''
try:
    yaml_path = get_file_path(__file__, marker="config.yaml")
    print(f"[AutoImport] config.yaml found at: {yaml_path}")
except Exception as e:
    print("[AutoImport] Failed to get_file_path config.yaml, e:" + str(e))
try:
    import yaml

    with open(yaml_path, encoding='utf-8') as f:
        config = yaml.safe_load(f)
    BASE_PACKAGE = config.get('jobs').get('base_package', 'Job')
    MODULE_PATTERN = config.get('jobs').get('module_pattern', 'Action.py')
    DEBUG = config.get('jobs').get('debug')
    MONGO_URI = config.get('mongo').get('uri', 'mongodb://localhost:27017')
    DB_NAME = config.get('mongo').get('database', 'EasyJob')
    SMTP = config.get('smtp')
    TO = config.get('smtp').get('to')
except Exception as e:
    print(f"[AutoImport] Failed to load config.yaml: {e}")
    BASE_PACKAGE = 'Job'
    MODULE_PATTERN = 'Action.py'
    MONGO_URI = 'mongodb://localhost:27017'
    DB_NAME = 'EasyJob'

db = MongoDB(uri=MONGO_URI, db_name=DB_NAME)
Job_c = db['Job']
History_c = db['History']


# ✅ 使用示例
def send_email(title: str, logs: List[dict] = None):
    if logs is None:
        logs = []
    header = sorted({key for log in logs for key in log.keys()})

    # 加载模板
    template_path = get_file_path(__file__, marker="log_template.html")
    with open(template_path, encoding="utf-8") as f:
        template = Template(f.read())

    # 渲染 HTML 内容
    rendered_html = template.render(title=title, logs=logs, header=header)
    email_content = EmailMessageContent(
        to=TO.split(","),
        subject=title,
        body=rendered_html,
        subtype="html"
    )
    smtp_config = SMTPConfig(
        login=SMTP.get('user'),
        password=SMTP.get('password'),
        smtp_server=SMTP.get('host'),
        smtp_port=SMTP.get('port'),
    )
    sender = EmailSender(smtp_config)
    sender.send(email_content)


def run(job_id, run_id=(int(time.time() * 1000) + random.randint(0, 999)) % 10 ** 6):
    """
    运行指定任务
    Run specified job

    :param job_id: 任务ID job ID
    :param run_id: 运行ID (默认生成) run ID (auto-generated by default)
    """
    if job_id not in JobBase._registry:
        raise ValueError(f"Job ID {job_id} not registered")
    job_class = JobBase._registry.get(job_id)
    job_instance = job_class(job_id=job_id, run_id=run_id)

    try:
        job_instance.logger.warning(f"Starting job: {job_id}")
        # 启动线程运行 on_run
        thread = JobThread(job_instance)
        thread.start()
        thread.join()  # 等待线程完成，并检查异常
        job_instance.logger.warning(f"Job {job_id} completed successfully")
    except Exception as e:
        job_instance.logger.error(f"Job failed: {str(e)}", exc_info=True)
        raise
    title = f"{job_instance.db_name}:{job_instance.job_id}"
    query = {
        'level': {'$gte': 30},  # 大于30
        'job_id': job_id,
        'run_id': run_id
    }
    send_query = {
        'level': {'$gte': 40},  # 大于30
        'job_id': job_id,
        'run_id': run_id
    }
    if DEBUG is True:
        return
    if job_instance.db['log'].count(query=send_query) <= 0:
        return
    logs = job_instance.db['log'].find_documents(query=query).dict()
    email_thread = threading.Thread(target=send_email, args=(title, logs))
    email_thread.start()
    email_thread.join()


def auto_import_jobs(base_package=BASE_PACKAGE):
    """
    自动导入所有任务模块
    Automatically import all job modules

    :param base_package: 基础包路径 base package path
    :return: 导入的模块列表 list of imported modules
    """
    base_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), base_package)
    modules = []
    for root, dirs, files in os.walk(base_dir):
        for file in files:
            if file.endswith(MODULE_PATTERN):
                # 构造模块名
                rel_path = os.path.relpath(os.path.join(root, file), os.path.dirname(os.path.dirname(__file__)))
                module_name = rel_path[:-3].replace(os.sep, '.')
                if module_name in sys.modules:
                    continue  # 已导入，跳过
                try:
                    importlib.import_module(module_name)
                    modules.append(module_name)
                except Exception as e:
                    print(f"[AutoImport] Failed to import {module_name}: {e}")
                    traceback.print_exc()
    print(f"[AutoImport] Auto import jobs completed: {modules}")
    print(f"JobBase.registry: {sorted(JobBase._registry.keys())}")


def save_jobs():
    # 保存任务
    existing_job_ids = [job['JobId'] for job in Job_c.find_documents()]
    for job_id, job_class in JobBase._registry.items():
        job_name = str(job_class.__name__)
        try:
            job_dict = Job(
                JobId=job_id,
                JobName=job_name,
                JobClass=str(job_class.__module__),
                Package=BASE_PACKAGE,
                Description=f'This is {job_name}',
                Disabled=1,
                Minute="*",
                Hour="*",
                DayOfWeek="*",
                DayOfMonth="*",
                MonthOfYear="*",
                Status=1
            ).dict()
            if job_id not in existing_job_ids:
                Job_c.save_dict_to_collection(job_dict)
        except Exception as e:
            print(f"[AutoImport] Failed to save job {job_id}: {e}")
            traceback.print_exc()


auto_import_jobs()
__all__ = [
    'BASE_PACKAGE',
    'MODULE_PATTERN',
    'Job_c',
    'History_c',
    'run',
    'get_file_path',
    'auto_import_jobs',
    'save_jobs'
]
